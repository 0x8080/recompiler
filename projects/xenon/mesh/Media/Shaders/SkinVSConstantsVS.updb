<?xml version="1.0" encoding="utf-8"?>
<shader-pdb pdbHint="4e4a0000-904dda5d-cd200ffc" version="21119">
 <files>
  <file id="0" path="C:\Program Files (x86)\Microsoft Xbox 360 SDK\Source\Samples\Media\Shaders\SkinnedCharacter.hlsl" time="01d30945-dc21c408">//--------------------------------------------------------------------------------------
// Shader for the SkinnedCharacter sample
//--------------------------------------------------------------------------------------

#define MAX_BONE_COUNT  80

// Vertex shader constants for transform and skinning.
float4x4    world_view_proj_matrix                  : register(c0);
float4      obj_camera_position                     : register(c4);
float4x3    bone_palette[MAX_BONE_COUNT]            : register(c12);

// Pixel shader constants for lighting.
float4      directional_light_direction             : register(c0);
float4      directional_light_color                 : register(c1);
float4      ambient_light_color                     : register(c2);
const float specular_exponent = 16.0;

// Vertex shader constants for memexport write destinations.
float4      export_address_position                 : register(c8);
float4      export_address_normal_tangent           : register(c9);
float4      export_address_texcoord0                : register(c10);
static float4 const01 = float4( 0, 1, 0, 0 );

// Vertex shader texture sampler for the bone matrix palette.
#define POINT_SAMPLER sampler_state { MipFilter = NONE; MinFilter = POINT; MagFilter = POINT; AddressU = CLAMP; AddressV = CLAMP; }
sampler1D   bone_palette_texture : register(s0) = POINT_SAMPLER;

// Pixel shader texture samplers for surface materials.
#define TRILINEAR_SAMPLER sampler_state { MipFilter = LINEAR; MinFilter = LINEAR; MagFilter = LINEAR; AddressU = WRAP; AddressV = WRAP; }
sampler2D   diffuse_texture     : register(s0) = TRILINEAR_SAMPLER;
sampler2D   normal_map_texture  : register(s1) = TRILINEAR_SAMPLER;
sampler2D   specular_texture    : register(s2) = TRILINEAR_SAMPLER;

struct VS_IN
{
    float3  Position        : POSITION0;
    float4  BoneIndices     : BLENDINDICES;
    float4  BoneWeights     : BLENDWEIGHT;
    float3  Normal          : NORMAL;
    float2  Tex0            : TEXCOORD0;
    float3  Tangent         : TANGENT;
};

struct VS_IN_NOWEIGHTS
{
    float3  Position        : POSITION0;
    float2  Tex0            : TEXCOORD0;
    float3  Normal          : NORMAL;
    float3  Tangent         : TANGENT;
};

struct VS_OUT
{
    float4 Position         : POSITION;
    float2 Tex0             : TEXCOORD0;
    float3 Normal           : TEXCOORD1;
    float3 Tangent          : TEXCOORD2;
    float3 Binormal         : TEXCOORD3;
    float3 ObjViewDir       : TEXCOORD4;
};

struct PS_IN
{
    float2 Tex0             : TEXCOORD0;
    float3 Normal           : TEXCOORD1;
    float3 Tangent          : TEXCOORD2;
    float3 Binormal         : TEXCOORD3;
    float3 ObjViewDir       : TEXCOORD4;
};


float4x3 ConstantFetchBoneMatrix( int BoneIndex )
{
    return bone_palette[ BoneIndex ];
}


VS_OUT SkinVSConstants( VS_IN In )
{
    VS_OUT Out;
    float4 InPos = float4( In.Position, 1 );
    
    float BoneWeights[4] = (float[4])In.BoneWeights;
    int BoneIndices[4] = (int[4])In.BoneIndices;
    
    //float4x3 LocalToWorldMatrix = 0.0f;
    float4x3 LocalToWorldMatrix = float4x3(1,0,0,0,1,0,0,0,1,0,0,0);
    /*for( int i = 3; i &gt;= 0; --i )
    {
        LocalToWorldMatrix += BoneWeights[i] * ConstantFetchBoneMatrix( BoneIndices[i] );
    }*/
    
    float3 OutPos = 0;
    float3 OutNormal = 0;
    float3 OutTangent = 0;
    
    [isolate]
    {
        OutPos = mul( InPos, LocalToWorldMatrix );
        OutNormal = mul( In.Normal, LocalToWorldMatrix );
        OutTangent = mul( In.Tangent, LocalToWorldMatrix );
    }

    Out.ObjViewDir = normalize( obj_camera_position - OutPos );
    Out.Position = mul( float4( OutPos, 1 ), world_view_proj_matrix );
    Out.Normal = OutNormal;
    Out.Tangent = OutTangent;
    Out.Binormal = cross( OutNormal, OutTangent );
    Out.Tex0 = In.Tex0;
    return Out;
}


float4x3 VFetchBoneMatrix( int BoneIndex )
{
    float4 Result1;
    float4 Result2;
    float4 Result3;
    asm
    {
        vfetch Result1, BoneIndex, position1;
        vfetch Result2, BoneIndex, position2;
        vfetch Result3, BoneIndex, position3;
    };
    
    float4x3 Result;
    Result._11_21_31_41 = Result1;
    Result._12_22_32_42 = Result2;
    Result._13_23_33_43 = Result3;
    return Result;
}


VS_OUT SkinVSVertexFetch( VS_IN In )
{
    VS_OUT Out;
    float4 InPos = float4( In.Position, 1 );
    
    float BoneWeights[4] = (float[4])In.BoneWeights;
    int BoneIndices[4] = (int[4])In.BoneIndices;
    
    float4x3 LocalToWorldMatrix = float4x3(1,0,0,0,1,0,0,0,1,0,0,0);
    /*for( int i = 3; i &gt;= 0; --i )
    {
        LocalToWorldMatrix += BoneWeights[i] * VFetchBoneMatrix( BoneIndices[i] );
    }*/
    
    float3 OutPos = 0;
    float3 OutNormal = 0;
    float3 OutTangent = 0;
    
    [isolate]
    {
        OutPos = mul( InPos, LocalToWorldMatrix );
        OutNormal = mul( In.Normal, LocalToWorldMatrix );
        OutTangent = mul( In.Tangent, LocalToWorldMatrix );
    }

    Out.ObjViewDir = normalize( obj_camera_position - OutPos );
    Out.Position = mul( float4( OutPos, 1 ), world_view_proj_matrix );
    Out.Normal = OutNormal;
    Out.Tangent = OutTangent;
    Out.Binormal = cross( OutNormal, OutTangent );
    Out.Tex0 = In.Tex0;
    return Out;
}


float4x3 VFetchBoneMatrixTextureCache( int BoneIndex )
{
    float4 Result1;
    float4 Result2;
    float4 Result3;
    asm
    {
        vfetch Result1, BoneIndex, position1, UseTextureCache=true
        vfetch Result2, BoneIndex, position2, UseTextureCache=true
        vfetch Result3, BoneIndex, position3, UseTextureCache=true
    };
    
    float4x3 Result;
    Result._11_21_31_41 = Result1;
    Result._12_22_32_42 = Result2;
    Result._13_23_33_43 = Result3;
    return Result;
}


VS_OUT SkinVSVertexFetchTextureCache( VS_IN In )
{
    VS_OUT Out;
    float4 InPos = float4( In.Position, 1 );
    
    float BoneWeights[4] = (float[4])In.BoneWeights;
    int BoneIndices[4] = (int[4])In.BoneIndices;
    
    float4x3 LocalToWorldMatrix = 0;
    for( int i = 3; i &gt;= 0; --i )
    {
        LocalToWorldMatrix += BoneWeights[i] * VFetchBoneMatrixTextureCache( BoneIndices[i] );
    }
    
    float3 OutPos = 0;
    float3 OutNormal = 0;
    float3 OutTangent = 0;
    
    [isolate]
    {
        OutPos = mul( InPos, LocalToWorldMatrix );
        OutNormal = mul( In.Normal, LocalToWorldMatrix );
        OutTangent = mul( In.Tangent, LocalToWorldMatrix );
    }

    Out.ObjViewDir = normalize( obj_camera_position - OutPos );
    Out.Position = mul( float4( OutPos, 1 ), world_view_proj_matrix );
    Out.Normal = OutNormal;
    Out.Tangent = OutTangent;
    Out.Binormal = cross( OutNormal, OutTangent );
    Out.Tex0 = In.Tex0;
    return Out;
}


float4x3 TFetchBoneMatrix( float BoneIndex )
{
    float TexCoord = BoneIndex / MAX_BONE_COUNT;
    float4 Result1;
    float4 Result2;
    float4 Result3;
    asm
    {
        tfetch1D Result1, TexCoord, bone_palette_texture, UseComputedLOD = false, OffsetX = 0.5
        tfetch1D Result2, TexCoord, bone_palette_texture, UseComputedLOD = false, OffsetX = 1.5
        tfetch1D Result3, TexCoord, bone_palette_texture, UseComputedLOD = false, OffsetX = 2.5
    };
    
    float4x3 Result;
    Result._11_21_31_41 = Result1.xyzw;
    Result._12_22_32_42 = Result2.xyzw;
    Result._13_23_33_43 = Result3.xyzw;
    return Result;
}


VS_OUT SkinVSTextureFetch( VS_IN In )
{
    VS_OUT Out;
    float4 InPos = float4( In.Position, 1 );
    
    float BoneWeights[4] = (float[4])In.BoneWeights;
    int BoneIndices[4] = (int[4])In.BoneIndices;
    
    float4x3 LocalToWorldMatrix = 0;
    for( int i = 3; i &gt;= 0; --i )
    {
        LocalToWorldMatrix += BoneWeights[i] * TFetchBoneMatrix( BoneIndices[i] );
    }
    
    float3 OutPos = 0;
    float3 OutNormal = 0;
    float3 OutTangent = 0;
    
    [isolate]
    {
        OutPos = mul( InPos, LocalToWorldMatrix );
        OutNormal = mul( In.Normal, LocalToWorldMatrix );
        OutTangent = mul( In.Tangent, LocalToWorldMatrix );
    }

    Out.ObjViewDir = normalize( obj_camera_position - OutPos );
    Out.Position = mul( float4( OutPos, 1 ), world_view_proj_matrix );
    Out.Normal = OutNormal;
    Out.Tangent = OutTangent;
    Out.Binormal = cross( OutNormal, OutTangent );
    Out.Tex0 = In.Tex0;
    return Out;
}


void SkinVSMemExport( VS_IN In, int Index: INDEX )
{
    float4 InPos = float4( In.Position, 1 );
    
    float BoneWeights[4] = (float[4])In.BoneWeights;
    int BoneIndices[4] = (int[4])In.BoneIndices;
    
    float4x3 LocalToWorldMatrix = 0;
    for( int i = 3; i &gt;= 0; --i )
    {
        LocalToWorldMatrix += BoneWeights[i] * TFetchBoneMatrix( BoneIndices[i] );
    }
    
    float3 OutPos = 0;
    float3 OutNormal = 0;
    float3 OutTangent = 0;
    
    [isolate]
    {
        OutPos = mul( InPos, LocalToWorldMatrix );
        OutNormal = mul( In.Normal, LocalToWorldMatrix );
        OutTangent = mul( In.Tangent, LocalToWorldMatrix );
    }

    // The memexport hardware doesn't know about DEC3N types so we have to encode the values ourselves.
    OutNormal *= 511.0;
    OutTangent *= 511.0;
    
    float OutX = OutPos.x;
    float OutY = OutPos.y;
    float OutZ = OutPos.z;
    
    // The vertex struct size is equal to 6 FLOATs, and the position is the first three.
    int PositionIndex = ( Index * 6 ) + 0;
    asm
    {
        // we need alloc export=2 because we're writing to more than just eM0
        alloc export=2
        mad eA, PositionIndex, const01, export_address_position
        mov eM0, OutX
        mov eM1, OutY
        mov eM2, OutZ
    };
    
    // The vertex struct size is equal to 6 FLOAT16_2s, and the texcoord0 is element 3.
    int TexCoordIndex = ( Index * 6 ) + 3;
    float2 InTex0 = In.Tex0;
    asm
    {
        alloc export=1
        mad eA, TexCoordIndex, const01, export_address_texcoord0
        mov eM0, InTex0
    };
    
    // The vertex struct size is equal to 6 DEC3Ns, and the normal and tangent
    // are elements 4 and 5.
    int NormalTangentIndex = ( Index * 6 ) + 4;
    asm
    {
        alloc export=2 // we need alloc export=2 because we're writing to more than just eM0
        mad eA, NormalTangentIndex, const01, export_address_normal_tangent
        mov eM0, OutNormal
        mov eM1, OutTangent
    };
}


VS_OUT TransformVS( VS_IN_NOWEIGHTS In )
{
    VS_OUT Out;
    Out.ObjViewDir = normalize( obj_camera_position - In.Position );
    Out.Position = mul( float4( In.Position, 1 ), world_view_proj_matrix );
    Out.Normal = In.Normal;
    Out.Tangent = In.Tangent;
    Out.Binormal = cross( In.Normal, In.Tangent );
    Out.Tex0 = In.Tex0;
    return Out;
}

float4 SolidColorPS() : COLOR
{
    return 1;
}

float3 RecoverXYZFromNormalMapSample( float2 NormalMapSample )
{
    // Expand normal map sample to -1..1 range.
    NormalMapSample = NormalMapSample * 2.0 - 1.0;
    float3 result = float3( NormalMapSample.x, NormalMapSample.y, saturate( 1 - dot( NormalMapSample, NormalMapSample ) ) );
    return result;
}

float3 BumpNormalToObjectSpace( float3 Normal, float3 Binormal, float3 Tangent, float3 SampledNormal )
{
    float3 obj_binormal = normalize( Binormal );
    float3 obj_tangent = normalize( Tangent );
    float3 obj_normal = normalize( Normal );
    float3 obj_bumpnormal = obj_tangent * SampledNormal.x +
                            obj_binormal * SampledNormal.y +
                            obj_normal * SampledNormal.z;
                            
    return normalize( obj_bumpnormal );
}

float4 NormalMapPS( PS_IN In ) : COLOR
{
    // Sample and decode normal map texture.
    float2 NormalMapXY = tex2D( normal_map_texture, In.Tex0 ).xy;
    float3 NormalMapSample = RecoverXYZFromNormalMapSample( NormalMapXY );
    // Reduce the intensity of the normal map sample.
    NormalMapSample.xy *= 0.6;
    
    // Convert normal map sample to object space.
    float3 ObjNormalMapSample = BumpNormalToObjectSpace( In.Normal, In.Binormal, In.Tangent, NormalMapSample );
    
    // Compute diffuse lighting term from directional light.
    float DiffuseLightAmount = saturate( dot( ObjNormalMapSample, -directional_light_direction ) );
    float4 DiffuseColor = tex2D( diffuse_texture, In.Tex0 );
    DiffuseColor *= ( directional_light_color * saturate( DiffuseLightAmount ) + ambient_light_color );
    
    // Compute specular lighting term from directional light.
    float3 ObjViewDir = normalize( In.ObjViewDir );
    float3 ReflectedView = reflect( ObjViewDir, ObjNormalMapSample );
    float SpecularLightAmount = pow( saturate( dot( -ReflectedView, ObjNormalMapSample ) ), 16.0 );
    float SpecularMap = tex2D( specular_texture, In.Tex0 ).x;
    SpecularLightAmount *= SpecularMap;
    SpecularLightAmount *= DiffuseLightAmount;
    float4 SpecularColor = directional_light_color * SpecularLightAmount;
    
    return DiffuseColor + SpecularColor;
}

</file>
 </files>
 <tool name="Compiler">
  <defines>
   <define name="EntryPoint_SkinVSConstants" value="" />
  </defines>
  <arguments>
   <argument name="/Zi" value="true" />
   <argument name="/Vd" value="false" />
   <argument name="/Xu0_deprecated" value="false" />
   <argument name="/Odu_deprecated" value="false" />
   <argument name="/XOd_" value="false" />
   <argument name="/XOu" value="false" />
   <argument name="/Xmaxtempreg" value="0" />
   <argument name="PsSampBase" value="0" />
   <argument name="PsSampCount" value="0" />
   <argument name="VsSampBase" value="0" />
   <argument name="VsSampCount" value="0" />
   <argument name="VsInstCount" value="0" />
   <argument name="PsInstCount" value="0" />
   <argument name="/Od" value="false" />
   <argument name="/Zpr" value="false" />
   <argument name="/Zpc" value="false" />
   <argument name="/Gpp" value="false" />
   <argument name="/Op" value="false" />
   <argument name="/Gfa" value="false" />
   <argument name="/Gfp" value="false" />
   <argument name="/XZc:zeroInit" value="false" />
   <argument name="/XVe" value="false" />
   <argument name="/Xbe:3-" value="false" />
   <argument name="/Xbe:1-" value="false" />
   <argument name="/XQInomaskedexports" value="false" />
   <argument name="/XOautoz" value="false" />
  </arguments>
 </tool>
 <shaders>
  <shader entrypoint="SkinVSConstants" target="vs_3_0" ZPass="0" pdbHint="4e4a0000-904dda5d-cd200ffc">
   <constanttable>
    <constant register="c4">
     <type name="obj_camera_position" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c0" count="4">
     <type name="world_view_proj_matrix" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="4" file="0" line="78" scope="-1" lastinstruction="0" />
    <statement pc="5" file="0" line="78" scope="-1" lastinstruction="0" />
    <statement pc="6" file="0" line="78" scope="-1" lastinstruction="0" />
    <statement pc="7" file="0" line="78" scope="-1" lastinstruction="0" />
    <statement pc="8" file="0" line="78" scope="-1" lastinstruction="0" />
    <statement pc="9" file="0" line="78" scope="-1" lastinstruction="0" />
    <statement pc="10" file="0" line="78" scope="-1" lastinstruction="0" />
    <statement pc="11" file="0" line="99" scope="-1" lastinstruction="0" />
    <statement pc="12" file="0" line="100" scope="-1" lastinstruction="0" />
    <statement pc="13" file="0" line="101" scope="-1" lastinstruction="0" />
    <statement pc="14" file="0" line="101" scope="-1" lastinstruction="0" />
    <statement pc="15" file="0" line="100" scope="-1" lastinstruction="0" />
    <statement pc="16" file="0" line="99" scope="-1" lastinstruction="0" />
    <statement pc="17" file="0" line="99" scope="-1" lastinstruction="0" />
    <statement pc="18" file="0" line="100" scope="-1" lastinstruction="0" />
    <statement pc="19" file="0" line="101" scope="-1" lastinstruction="0" />
    <statement pc="20" file="0" line="99" scope="-1" lastinstruction="0" />
    <statement pc="21" file="0" line="105" scope="-1" lastinstruction="0" />
    <statement pc="22" file="0" line="105" scope="-1" lastinstruction="0" />
    <statement pc="23" file="0" line="105" scope="-1" lastinstruction="0" />
    <statement pc="24" file="0" line="105" scope="-1" lastinstruction="0" />
    <statement pc="25" file="0" line="105" scope="-1" lastinstruction="0" />
    <statement pc="2.1" file="0" line="105" scope="-1" lastinstruction="0" />
    <statement pc="26" file="0" line="104" scope="-1" lastinstruction="0" />
    <statement pc="27" file="0" line="104" scope="-1" lastinstruction="0" />
    <statement pc="28" file="0" line="108" scope="-1" lastinstruction="0" />
    <statement pc="29" file="0" line="108" scope="-1" lastinstruction="0" />
    <statement pc="30" file="0" line="110" scope="-1" lastinstruction="0" />
    <statement pc="31" file="0" line="110" scope="-1" lastinstruction="0" />
    <statement pc="32" file="0" line="110" scope="-1" lastinstruction="0" />
    <statement pc="33" file="0" line="104" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="NormalMapPS" retID="138">
     <parameter id="137" />
    </function>
    <function id="1" name="BumpNormalToObjectSpace" retID="132">
     <parameter id="128" />
     <parameter id="129" />
     <parameter id="130" />
     <parameter id="131" />
    </function>
    <function id="2" name="RecoverXYZFromNormalMapSample" retID="126">
     <parameter id="125" />
    </function>
    <function id="3" name="SolidColorPS" retID="124">
    </function>
    <function id="4" name="TransformVS" retID="122">
     <parameter id="121" />
    </function>
    <function id="5" name="SkinVSMemExport" retID="105">
     <parameter id="103" />
     <parameter id="104" />
    </function>
    <function id="6" name="SkinVSTextureFetch" retID="93">
     <parameter id="92" />
    </function>
    <function id="7" name="TFetchBoneMatrix" retID="86">
     <parameter id="85" />
    </function>
    <function id="8" name="SkinVSVertexFetchTextureCache" retID="75">
     <parameter id="74" />
    </function>
    <function id="9" name="VFetchBoneMatrixTextureCache" retID="69">
     <parameter id="68" />
    </function>
    <function id="10" name="SkinVSVertexFetch" retID="59">
     <parameter id="58" />
    </function>
    <function id="11" name="VFetchBoneMatrix" retID="53">
     <parameter id="52" />
    </function>
    <function id="12" name="SkinVSConstants" retID="43">
     <parameter id="42" />
    </function>
    <function id="13" name="ConstantFetchBoneMatrix" retID="41">
     <parameter id="40" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="4" Register="7" DestSwizzle="xyz1" Semantic="0x00" End="false" />
    <vfetch Address="5" Register="3" DestSwizzle="xyz_" Semantic="0x30" End="false" />
    <vfetch Address="6" Register="0" DestSwizzle="_xy_" Semantic="0x50" End="false" />
    <vfetch Address="7" Register="2" DestSwizzle="xyz_" Semantic="0x60" End="true" />
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0x50" Mask="xy" />
    <Interpolator Register="1" Semantic="0x51" Mask="xyz" />
    <Interpolator Register="2" Semantic="0x52" Mask="xyz" />
    <Interpolator Register="3" Semantic="0x53" Mask="xyz" />
    <Interpolator Register="4" Semantic="0x54" Mask="xyz" />
   </InterpolatorInfo>
   <LiteralFloats>
    <Float Register="252" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="253" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="254" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="255" value0="0" value1="1" value2="0" value3="0" />
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
 </shaders>
</shader-pdb>
