<?xml version="1.0" encoding="utf-8"?>
<shader-pdb pdbHint="4e4a0000-1b8a1c12-87346134" version="21119">
 <files>
  <file id="0" path="C:\Program Files (x86)\Microsoft Xbox 360 SDK\Source\Samples\Media\Shaders\LightShafts_VolVizShells.hlsl" time="01ccf361-58696b1f">//--------------------------------------------------------------------------------------
// LightShafts_VolVizShells.hlsl
//
// Shaders for vol viz light shaft rendering in the LightShafts sample
//
// Xbox Advanced Technology Group.
// Copyright (C) Microsoft Corporation. All rights reserved.
// ATI 3D Application Research Group. 
// Copyright (C) ATI Research, Inc. All rights reserved. 
//--------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------
// Vertex shader constants
//--------------------------------------------------------------------------------------
uniform float4x4 g_matWorldViewProj         : register(c0);
uniform float4x4 g_matWorldLightProj        : register(c4);
uniform float4x4 g_matWorldLight            : register(c8); // Transform to light space matrix
uniform float4x4 g_matWorldViewInv          : register(c12);
uniform float4x4 g_matWorldLightProjBias    : register(c20); // Transform to biased projective light space
uniform float4x4 g_matWorldLightProjScroll1 : register(c24); // Transform to scrolling projective light space
uniform float4x4 g_matWorldLightProjScroll2 : register(c28); // Transform to scrolling projective light space

uniform float    g_fFarPlane                : register(c32);
uniform float3   g_vMinBounds               : register(c33); // View-space bounding volume minimum vert
uniform float3   g_vMaxBounds               : register(c34); // View-space bounding volume maximum vert

uniform float    g_fFractionOfMaxShellsVS   : register(c40);  // Scale factor based on number of shells actually drawn


//--------------------------------------------------------------------------------------
// Pixel shader constants
//--------------------------------------------------------------------------------------
uniform float    g_fFractionOfMaxShellsPS          : register(c0);  // Scale factor based on number of shells actually drawn

const   bool     g_bScrollingNoise = true;      // : register(c2);
const   bool     g_bShadowMapping  = true;      // : register(c3);


//--------------------------------------------------------------------------------------
// Samplers
//--------------------------------------------------------------------------------------
sampler CookieSampler         : register(s1);
sampler ScrollingNoiseSampler : register(s2);
sampler ShadowMapSampler      : register(s3);


//--------------------------------------------------------------------------------------
// Vertex structures
//--------------------------------------------------------------------------------------
struct VS_VOLVIZSHELLS_OUTPUT
{
   float4 vPos                 : POSITION;
   float4 vCookieProjTexCoord  : TEXCOORD0;
   float4 vScroll1ProjTexCoord : TEXCOORD1;
   float4 vScroll2ProjTexCoord : TEXCOORD2;
   float3 vLightSpacePos       : TEXCOORD3;
   float2 vDepth               : TEXCOORD4;
};


//--------------------------------------------------------------------------------------
// Name: VolVizShellsMainVS()
// Desc: Vertex Shader which generates proper light-space texture coordinates
//--------------------------------------------------------------------------------------
VS_VOLVIZSHELLS_OUTPUT VolVizShellsMainVS( float3 vPos : POSITION )
{
    VS_VOLVIZSHELLS_OUTPUT Out = (VS_VOLVIZSHELLS_OUTPUT)0; 

    // Must stretch the planes in z to compensate for drawing fewer than all of the planes in the VB
    float3 vStretchedMaxBounds = g_vMaxBounds;
    vStretchedMaxBounds.z = vStretchedMaxBounds.z / g_fFractionOfMaxShellsVS;

    // Trilerp position within view-space-axis-aligned bounding volume of light's frustum
    float4 vViewPosition = float4( g_vMinBounds * vPos + ( vStretchedMaxBounds * (1.0f - vPos) ), 1 );

    // Calculate the position in object space
    float4 vObjectSpacePos = mul( vViewPosition, g_matWorldViewInv );

    // Output clip-space position
    Out.vPos = mul( vObjectSpacePos, g_matWorldViewProj );

    // Output projective coordinates for cookie
    Out.vCookieProjTexCoord = mul( vObjectSpacePos, g_matWorldLightProjBias );

    // Output scrolling projective coordinates for noise map
    Out.vScroll1ProjTexCoord = mul( vObjectSpacePos, g_matWorldLightProjScroll1 );
    Out.vScroll2ProjTexCoord = mul( vObjectSpacePos, g_matWorldLightProjScroll2 );

    // Position in projective light space
    float4 vLightSpacePos = mul( vObjectSpacePos, g_matWorldLightProj );

    // Light space position for scattering equations
    Out.vLightSpacePos = mul( vObjectSpacePos, g_matWorldLight );

    // Output projective light space depth (for shadow mapping)
    Out.vDepth.x = vLightSpacePos.z;
    Out.vDepth.y = vLightSpacePos.w;

    return Out;
}


//--------------------------------------------------------------------------------------
// Name: VolVizShellsNoiseShadowPS()
// Desc: 
//--------------------------------------------------------------------------------------
float4 VolVizShellsNoiseShadowPS( VS_VOLVIZSHELLS_OUTPUT In ) : COLOR
{
    // Sample the cookie and shadow map using same texture coordinates
    float4 vCookie = tex2Dproj( CookieSampler, In.vCookieProjTexCoord );

    if( vCookie.r == 0.0f )
    {
        return 0.0f;
    }
    else
    {
        // Add shadow (1.0f == pixel is in light, 0.0f == pixel is occluded)
        float fShadow = 1.0f;
        // if( g_bShadowMapping )
        {
            float fProjLightSpaceDepth = In.vDepth.x / In.vDepth.y;
            float fShadowMapDepth      = tex2Dproj( ShadowMapSampler, In.vCookieProjTexCoord ).x;
            fShadowMapDepth += 0.001f;
            fShadow = ( fProjLightSpaceDepth &lt; fShadowMapDepth ) ? 1.0f : 0.0f;
        }
        if( fShadow == 0.0f )
        {
            return 0.0f;
        }
        else
        {
            // Add noise
            float fCompositeNoise = 0.015f;
            // if( g_bScrollingNoise )
            {
                // One noise map, but different projections and channels used
                float4 vNoise1 = tex2Dproj( ScrollingNoiseSampler, In.vScroll1ProjTexCoord );
                float4 vNoise2 = tex2Dproj( ScrollingNoiseSampler, In.vScroll2ProjTexCoord );
                fCompositeNoise = vNoise1.r * vNoise2.g * 0.05f;
            }

            // Compute attenuation 1/(s^2)
            float fAtten = 0.25f + 20000.0f / dot( In.vLightSpacePos, In.vLightSpacePos );
            float fScale = 1.0f / g_fFractionOfMaxShellsPS;

            // Composite scalar result
            return fCompositeNoise * vCookie.r * fScale * fAtten * fShadow;
        }
    }
}
</file>
 </files>
 <tool name="Compiler">
  <defines>
   <define name="EntryPoint_VolVizShellsMainVS" value="" />
  </defines>
  <arguments>
   <argument name="/Zi" value="true" />
   <argument name="/Vd" value="false" />
   <argument name="/Xu0_deprecated" value="false" />
   <argument name="/Odu_deprecated" value="false" />
   <argument name="/XOd_" value="false" />
   <argument name="/XOu" value="false" />
   <argument name="/Xmaxtempreg" value="0" />
   <argument name="PsSampBase" value="0" />
   <argument name="PsSampCount" value="0" />
   <argument name="VsSampBase" value="0" />
   <argument name="VsSampCount" value="0" />
   <argument name="VsInstCount" value="0" />
   <argument name="PsInstCount" value="0" />
   <argument name="/Od" value="false" />
   <argument name="/Zpr" value="false" />
   <argument name="/Zpc" value="false" />
   <argument name="/Gpp" value="false" />
   <argument name="/Op" value="false" />
   <argument name="/Gfa" value="false" />
   <argument name="/Gfp" value="false" />
   <argument name="/XZc:zeroInit" value="false" />
   <argument name="/XVe" value="false" />
   <argument name="/Xbe:3-" value="false" />
   <argument name="/Xbe:1-" value="false" />
   <argument name="/XQInomaskedexports" value="false" />
   <argument name="/XOautoz" value="false" />
  </arguments>
 </tool>
 <shaders>
  <shader entrypoint="VolVizShellsMainVS" target="vs_3_0" ZPass="0" pdbHint="4e4a0000-1b8a1c12-87346134">
   <constanttable>
    <constant register="c40">
     <type name="g_fFractionOfMaxShellsVS" class="scalar" type="float" />
    </constant>
    <constant register="c8" count="3">
     <type name="g_matWorldLight" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c4" count="4">
     <type name="g_matWorldLightProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c20" count="4">
     <type name="g_matWorldLightProjBias" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c24" count="4">
     <type name="g_matWorldLightProjScroll1" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c28" count="4">
     <type name="g_matWorldLightProjScroll2" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c12" count="4">
     <type name="g_matWorldViewInv" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c0" count="4">
     <type name="g_matWorldViewProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c34">
     <type name="g_vMaxBounds" class="vector" type="float" columns="3" />
    </constant>
    <constant register="c33">
     <type name="g_vMinBounds" class="vector" type="float" columns="3" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="4" file="0" line="66" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="0" line="66" scope="-1" lastinstruction="0" />
    <statement pc="5" file="0" line="75" scope="-1" lastinstruction="0" />
    <statement pc="6" file="0" line="75" scope="-1" lastinstruction="0" />
    <statement pc="7" file="0" line="75" scope="-1" lastinstruction="0" />
    <statement pc="8" file="0" line="75" scope="-1" lastinstruction="0" />
    <statement pc="9" file="0" line="78" scope="-1" lastinstruction="0" />
    <statement pc="10" file="0" line="78" scope="-1" lastinstruction="0" />
    <statement pc="11" file="0" line="78" scope="-1" lastinstruction="0" />
    <statement pc="12" file="0" line="78" scope="-1" lastinstruction="0" />
    <statement pc="13" file="0" line="81" scope="-1" lastinstruction="0" />
    <statement pc="14" file="0" line="81" scope="-1" lastinstruction="0" />
    <statement pc="15" file="0" line="81" scope="-1" lastinstruction="0" />
    <statement pc="16" file="0" line="81" scope="-1" lastinstruction="0" />
    <statement pc="2.0" file="0" line="81" scope="-1" lastinstruction="0" />
    <statement pc="17" file="0" line="84" scope="-1" lastinstruction="0" />
    <statement pc="18" file="0" line="84" scope="-1" lastinstruction="0" />
    <statement pc="19" file="0" line="84" scope="-1" lastinstruction="0" />
    <statement pc="20" file="0" line="84" scope="-1" lastinstruction="0" />
    <statement pc="21" file="0" line="87" scope="-1" lastinstruction="0" />
    <statement pc="22" file="0" line="87" scope="-1" lastinstruction="0" />
    <statement pc="23" file="0" line="87" scope="-1" lastinstruction="0" />
    <statement pc="24" file="0" line="87" scope="-1" lastinstruction="0" />
    <statement pc="25" file="0" line="88" scope="-1" lastinstruction="0" />
    <statement pc="26" file="0" line="88" scope="-1" lastinstruction="0" />
    <statement pc="27" file="0" line="88" scope="-1" lastinstruction="0" />
    <statement pc="28" file="0" line="88" scope="-1" lastinstruction="0" />
    <statement pc="29" file="0" line="94" scope="-1" lastinstruction="0" />
    <statement pc="30" file="0" line="94" scope="-1" lastinstruction="0" />
    <statement pc="31" file="0" line="94" scope="-1" lastinstruction="0" />
    <statement pc="32" file="0" line="91" scope="-1" lastinstruction="0" />
    <statement pc="33" file="0" line="91" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="VolVizShellsNoiseShadowPS" retID="32">
     <parameter id="31" />
    </function>
    <function id="1" name="VolVizShellsMainVS" retID="25">
     <parameter id="24" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="4" Register="1" DestSwizzle="xyz_" Semantic="0x00" End="false" />
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0x50" Mask="xyzw" />
    <Interpolator Register="1" Semantic="0x51" Mask="xyzw" />
    <Interpolator Register="2" Semantic="0x52" Mask="xyzw" />
    <Interpolator Register="3" Semantic="0x53" Mask="xyz" />
    <Interpolator Register="4" Semantic="0x54" Mask="xy" />
   </InterpolatorInfo>
   <LiteralFloats>
    <Float Register="252" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="253" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="254" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="255" value0="1" value1="0" value2="0" value3="0" />
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
 </shaders>
</shader-pdb>
